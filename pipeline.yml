pr:
  - develop
  - master

pool:
  name: 'Azure Epiphany cluster - epiphany-build-agents-v2'

variables:
  WORK_DIR: $(System.DefaultWorkingDirectory)

steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - task: CmdLine@2
    displayName: 'Install Dependencies'
    inputs:
      script: |
        add-apt-repository ppa:deadsnakes/ppa -y
        apt update
        apt-get install -y --no-install-recommends python3.7
        python3 -m pip install yt
        apt-get install -y wget make ssh curl bc
        wget https://github.com/mikefarah/yq/releases/download/3.3.4/yq_linux_amd64 -O /usr/bin/yq && \
          chmod +x /usr/bin/yq
        az || curl -sL https://aka.ms/InstallAzureCLIDeb | bash
  - task: GoTool@0
    displayName: 'Instal GO'
    inputs:
      version: '1.10'
      goPath: '/root/go'
      goBin: '/root/go/bin'
  - task: Go@0
    displayName: 'Get go-junit-report plugin'
    inputs:
      command: 'get'
      arguments: '-u github.com/jstemmer/go-junit-report'
  - task: Bash@3
    displayName: 'Read and Set Variables'
    inputs:
      targetType: 'inline'
      script: |
        READ_MAJOR_VERSION=`grep VERSION\ \?\= Makefile | awk -F ' ?= ' '{print $2}'`
        READ_REPOSITORY_NAME=`grep USER\ \:\= Makefile | awk -F ' := ' '{print $2}'`
        READ_IMAGE_NAME=`grep IMAGE\ \:\= Makefile | awk -F ' := ' '{print $2}'`
        SET_PATH=`echo $GOPATH:$GOBIN:$PATH`
        echo "##vso[task.setvariable variable=MAJOR_VERSION]$READ_MAJOR_VERSION"
        echo "##vso[task.setvariable variable=REPOSITORY_NAME]$READ_REPOSITORY_NAME"
        echo "##vso[task.setvariable variable=IMAGE_NAME]$READ_IMAGE_NAME"
        echo "##vso[task.setvariable variable=PATH]$SET_PATH"
  - task: Bash@3
    displayName: 'Run Tests'
    inputs:
      targetType: 'inline'
      script: |
        export K8S_HOST_PATH="${K8S_HOST_PATH}/${IMAGE_NAME}"
        export K8S_VOL_PATH="${K8S_VOL_PATH}/${IMAGE_NAME}"
        cd $WORK_DIR
        echo "Start make test"
        make test ARM_CLIENT_ID=$CLIENT_ID ARM_CLIENT_SECRET=$CLIENT_SECRET ARM_SUBSCRIPTION_ID=$SUBSCRIPTION_ID ARM_TENANT_ID=$TENANT_ID
      failOnStderr: true
  - task: CmdLine@2
    displayName: 'Delete created image'
    inputs:
      script: |
        echo "Deleting image"
        echo "---------------------------------------------------------------"
        echo "Removing image"
        docker rmi $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION) --force
  - task: PublishTestResults@2
    displayName: 'Publish Test Results report.xml'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'report.xml'
      searchFolder: '$(k8s_vol_path)/$(IMAGE_NAME)/'
      publishRunAttachments: true
