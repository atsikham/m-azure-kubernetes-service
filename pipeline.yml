trigger:
  branches:
    include:
      - develop
      - master
pr:
  branches:
    include:
      - master
      - develop

pool:
  name: $(poolName)

jobs:
  - job: Test
    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: '3.7'
          addToPath: true
      - task: CmdLine@2
        displayName: 'Install Dependencies'
        inputs:
          script: |
            add-apt-repository ppa:deadsnakes/ppa -y
            apt update
            apt-get install -y --no-install-recommends python3.7
            python3 -m pip install yt
            apt-get install -y wget make ssh curl bc
            wget https://github.com/mikefarah/yq/releases/download/3.3.4/yq_linux_amd64 -O /usr/bin/yq && \
              chmod +x /usr/bin/yq
            az || curl -sL https://aka.ms/InstallAzureCLIDeb | bash
      - task: GoTool@0
        displayName: 'Install GO'
        inputs:
          version: '1.15.2'
      - task: Go@0
        displayName: 'Get go-junit-report plugin'
        inputs:
          command: 'get'
          arguments: '-u github.com/jstemmer/go-junit-report'
      - task: Bash@3
        displayName: 'Read and Set Variables'
        inputs:
          targetType: 'inline'
          script: |
            READ_MAJOR_VERSION=`grep VERSION\ \?\= Makefile | awk -F ' ?= ' '{print $2}'`
            READ_REPOSITORY_NAME=`grep USER\ \:\= Makefile | awk -F ' := ' '{print $2}'`
            READ_IMAGE_NAME=`grep IMAGE\ \:\= Makefile | awk -F ' := ' '{print $2}'`
            SET_PATH=`echo $GOPATH:$GOBIN:$PATH`
            echo "##vso[task.setvariable variable=MAJOR_VERSION]$READ_MAJOR_VERSION"
            echo "##vso[task.setvariable variable=REPOSITORY_NAME]$READ_REPOSITORY_NAME"
            echo "##vso[task.setvariable variable=IMAGE_NAME]$READ_IMAGE_NAME"
            echo "##vso[task.setvariable variable=PATH]$SET_PATH"
      - task: Bash@3
        displayName: 'Run Tests'
        inputs:
          targetType: 'inline'
          script: |
            export K8S_HOST_PATH="${K8S_HOST_PATH}/${IMAGE_NAME}"
            export K8S_VOL_PATH="${K8S_VOL_PATH}/${IMAGE_NAME}"
            cd $WORK_DIR
            echo "Start make test"
            make test ARM_CLIENT_ID=$CLIENT_ID ARM_CLIENT_SECRET=$CLIENT_SECRET ARM_SUBSCRIPTION_ID=$SUBSCRIPTION_ID ARM_TENANT_ID=$TENANT_ID
          failOnStderr: true
        env:
          CLIENT_SECRET: $(clientSecret)
          WORK_DIR: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: 'Delete created image'
        inputs:
          script: |
            echo "Deleting image"
            echo "---------------------------------------------------------------"
            echo "Removing image"
            docker rmi $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION) --force
      - task: PublishTestResults@2
        displayName: 'Publish Test Results report.xml'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'report.xml'
          searchFolder: '$(k8s_vol_path)/$(IMAGE_NAME)/'
          publishRunAttachments: true
  - job: Publish
    dependsOn: Test
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop'))
    steps:
      - task: Bash@3
        displayName: 'Read Variables from Makefile'
        inputs:
          targetType: 'inline'
          script: |
            READ_MAJOR_VERSION=`grep VERSION\ \?\= Makefile | awk -F ' ?= ' '{print $2}'`
            READ_REPOSITORY_NAME=`grep USER\ \:\= Makefile | awk -F ' := ' '{print $2}'`
            READ_IMAGE_NAME=`grep IMAGE\ \:\= Makefile | awk -F ' := ' '{print $2}'`
            echo "##vso[task.setvariable variable=MAJOR_VERSION]$READ_MAJOR_VERSION"
            echo "##vso[task.setvariable variable=REPOSITORY_NAME]$READ_REPOSITORY_NAME"
            echo "##vso[task.setvariable variable=IMAGE_NAME]$READ_IMAGE_NAME"
      - task: Bash@3
        displayName: 'Echo variables obtained from Makefile'
        inputs:
          targetType: 'inline'
          script: |
            echo "MAJOR_VERSION: $(MAJOR_VERSION)"
            echo "REPOSITORY_NAME: $(REPOSITORY_NAME)"
            echo "IMAGE_NAME: $(IMAGE_NAME)"
            echo "Build.BuildId: $(Build.BuildId)"
      - task: CmdLine@2
        displayName: 'Build and Tag image'
        inputs:
          script: |
            set -eu
            cd $(System.DefaultWorkingDirectory)
            echo "Working dir: "
            pwd
            echo "Start make build"
            make build VERSION=$(MAJOR_VERSION).$(Build.BuildId)
            docker tag $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION).$(Build.BuildId) $(registry_name)/$(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION).$(Build.BuildId)
      - task: Docker@2
        displayName: 'Push image'
        inputs:
          containerRegistry: $(registry_name)
          command: push
          repository: $(REPOSITORY_NAME)/$(IMAGE_NAME)
          tags: $(MAJOR_VERSION).$(Build.BuildId)
      - task: CmdLine@2
        displayName: 'Cleaning'
        inputs:
          script: |
            echo "Deleting images"
            echo "---------------------------------------------------------------"
            echo "Removing images"
            docker rmi $(registry_name)/$(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION).$(Build.BuildId)
            docker rmi $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION).$(Build.BuildId)
